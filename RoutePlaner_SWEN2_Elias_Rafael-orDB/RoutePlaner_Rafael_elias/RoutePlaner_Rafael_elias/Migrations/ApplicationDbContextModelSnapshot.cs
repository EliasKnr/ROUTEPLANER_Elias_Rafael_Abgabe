// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RoutePlaner_Rafael_elias.Database;

#nullable disable

namespace RoutePlaner_Rafael_elias.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoutePlaner_Rafael_elias.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Difficulty")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Duration")
                        .HasColumnType("numeric");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<decimal>("Steps")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalTime")
                        .HasColumnType("numeric");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.Property<string>("Weather")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourLog", (string)null);
                });

            modelBuilder.Entity("RoutePlaner_Rafael_elias.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<string>("EncodedRoute")
                        .HasColumnType("text");

                    b.Property<double>("EndLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("EndLongitude")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("EstimatedTime")
                        .HasColumnType("interval");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RouteType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("StartLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("StartLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tour", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dies ist eine Test-Tour.",
                            Distance = 80.0,
                            EncodedRoute = "",
                            EndLatitude = 48.224672649565186,
                            EndLongitude = 16.34765625,
                            EstimatedTime = new TimeSpan(0, 1, 30, 0, 0),
                            From = "Mank",
                            Name = "TestTour",
                            RouteType = "driving-car",
                            StartLatitude = 48.136766679692691,
                            StartLongitude = 15.64453125,
                            To = "Wien"
                        });
                });

            modelBuilder.Entity("RoutePlaner_Rafael_elias.Models.Log", b =>
                {
                    b.HasOne("RoutePlaner_Rafael_elias.Models.Tour", "Tour")
                        .WithMany("Logs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("RoutePlaner_Rafael_elias.Models.Tour", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
